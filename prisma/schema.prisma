generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN     // cria eventos e ingressos
  USER      // compra ingressos
  STAFF     // valida ingressos no dia do evento
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  REFUNDED
}

enum OrderStatus {
  PENDING
  PAID
  CANCELED
  REFUNDED
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  phone     String?    @unique
  name      String?
  role      UserRole   @default(USER)
  
  orders    Order[]
  tickets   Ticket[]
  payments  Payment[]
  authcodes AuthCode[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model AuthCode {
  id        String   @id @default(cuid())
  userId    String
  code      String   // código enviado (ex.: 6 dígitos)
  expiresAt DateTime // expira em poucos minutos
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
}

model Event {
  id              String       @id @default(cuid())
  name            String
  date            DateTime
  thumbMobile     String?
  thumbDesktop    String?
  thumbDestaque   String?
  stripeProductId String?      // <- aqui
  ticketTypes     TicketType[]
  tickets         Ticket[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}


model TicketType {
  id            String   @id @default(cuid())
  eventId       String
  name          String
  price         Int      // em centavos
  quantity      Int
  stripePriceId String?  // <- aqui
  
  event     Event    @relation(fields: [eventId], references: [id])
  tickets   Ticket[]
}

model Ticket {
  id          String      @id @default(cuid())
  ticketTypeId String
  eventId     String
  userId      String?
  orderId     String?
  qrCode      String      @unique
  used        Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  event       Event       @relation(fields: [eventId], references: [id])
  ticketType  TicketType  @relation(fields: [ticketTypeId], references: [id])
  user        User?       @relation(fields: [userId], references: [id])
  order       Order?      @relation(fields: [orderId], references: [id])
  payments    Payment[]
}

model Order {
  id        String     @id @default(cuid())
  userId    String
  total     Int
  status    OrderStatus @default(PENDING)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  user      User       @relation(fields: [userId], references: [id])
  tickets   Ticket[]
  payments  Payment[]
}

model Payment {
  id        String        @id @default(cuid())
  stripeId  String        @unique
  status    PaymentStatus
  orderId   String
  userId    String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  order     Order         @relation(fields: [orderId], references: [id])
  user      User          @relation(fields: [userId], references: [id])

  Ticket Ticket[]
}
